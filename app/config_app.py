import hashlib
import streamlit as st
import json
import os
from extra_streamlit_components import CookieManager

from db import DataBase
from main import Report

cookie_manager = CookieManager()
db = DataBase()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_auth(login: str, password):
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    stored_hash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"  # hash –¥–ª—è 'admin'

    return login == "admin" and password_hash == stored_hash


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def load_config():
    try:
        if os.path.exists('config'):
            with open('config', 'r', encoding='utf-8') as f:
                return json.load(f)
    except:
        pass

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_config = {
        "cvat": {
            "url": "http://neuron.npomis.ru:8080",
            "user": {
                "username": "spopov",
                "email": "spopov@npomis.ru",
                "password": "C6hd4z4n!"
            }
        },
        "email": {
            "sender": {
                "username": "ayurkevich",
                "email": "ayurkevich@npomis.ru",
                "password": "ePu9ahga"
            },
            "recipient": {
                "email": "ad6803884@yandex.ru"
            }
        }
    }
    return default_config

# –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
def logout():
    st.session_state.authenticated = False
    st.session_state.persistent_auth = False
    st.session_state.config_updated = False

    # –£–¥–∞–ª—è–µ–º cookie
    try:
        cookie_manager.delete('admin_auth')
    except:
        pass

    st.rerun()

# –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
def login(login: str, password, remember_me=False):
    if check_auth(login, password):
        st.session_state.authenticated = True
        st.session_state.persistent_auth = remember_me
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookies –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        if remember_me:
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –Ω–∞ 30 –¥–Ω–µ–π
                import datetime
                expires_at = datetime.datetime.now() + datetime.timedelta(days=30)
                cookie_manager.set('admin_auth', 'authenticated_admin_session', expires_at=expires_at)
            except:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ cookies")

        db.update_db()
        st.rerun()
    else:
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    with open('config', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def apply_changes():
    save_config(st.session_state.app_config)
    st.rerun()
    # st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    # time.sleep(5)
    # st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ cookies
def check_cookie_auth():
    try:
        auth_cookie = cookie_manager.get('admin_auth')
        if auth_cookie:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ)
            return auth_cookie == "authenticated_admin_session"
    except:
        pass
    return False

def find_key_by_value(data, value, field):
    for key, item in data.items():
        if item.get(field) == value:
            return key
    return None

def generate_report():
    st.session_state.generate_report = False
    rep = Report()
    rep.daily_task()

def click_generate_report():
    st.session_state.generate_report = True

def app():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookies (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    if not hasattr(st, 'cookie_manager_initialized'):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å cookie manager
            if hasattr(cookie_manager, 'get_all'):
                st.cookie_manager_initialized = True
        except:
            pass

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π cookies
    if 'authenticated' not in st.session_state:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ cookies
        if check_cookie_auth():
            st.session_state.authenticated = True
            st.session_state.persistent_auth = True
        else:
            st.session_state.authenticated = False
            st.session_state.persistent_auth = False

    if 'app_config' not in st.session_state:
        st.session_state.app_config = load_config()

    if 'generate_report' not in st.session_state:
        st.session_state.generate_report = False

    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    if not st.session_state.authenticated:
        st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        with st.form("auth_form"):
            login_input = st.text_input("–õ–æ–≥–∏–Ω", placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", value="admin")
            password_input = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", value="admin")
            remember_me = st.checkbox("–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", value=True)

            submitted = st.form_submit_button("–í–æ–π—Ç–∏", type="primary")

            if submitted:
                login(login_input, password_input, remember_me)

        # st.info("üí° –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: **–ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: admin**")

        st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–ª—å—à–µ

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.write(f"**–í—ã –≤–æ—à–ª–∏ –∫–∞–∫:** admin")

        st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", on_click=click_generate_report, type="primary")

        if st.session_state.generate_report:
            generate_report()

        if st.button("üö™ –í—ã–π—Ç–∏"):
            logout()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ session_state
    if 'config' not in st.session_state:
        st.session_state.app_config = load_config()
    config_container = st.container()
    with (config_container):
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.title("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")


        st.markdown("### –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        st.json(st.session_state.app_config, expanded=False)


        st.markdown("### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        with st.form("app_config_form"):
            st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            st.markdown("##### –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
            sender_username = st.text_input(
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['email']['sender']['username'],
                key="sender_username_input"
            )

            sender_email = st.text_input(
                "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['email']['sender']['email'],
                key="sender_email_input"
            )

            sender_password = st.text_input(
                "–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['email']['sender']['password'],
                type='password',
                key="sender_password_input"
            )

            st.markdown("##### –ü–æ–ª—É—á–∞—Ç–µ–ª–∏")
            recipient_emails = st.multiselect(
                '–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                options=st.session_state.app_config['email']['recipient']['emails'],
                default=st.session_state.app_config['email']['recipient']['emails'],
                key="recipients_email_input",
                accept_new_options=True
            )

            st.markdown("##### –•—Ä–∞–Ω–µ–Ω–∏–µ")
            report_folder_path = st.text_input(
                "–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤",
                value=st.session_state.app_config['report']['folder_path'],
                key="report_folder_path_input"
            )

            st.markdown("##### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

            cb_users = {}
            users = db.get_users()
            for user_id, user in users.items():
                value = False
                if user_id in st.session_state.app_config['report']['users']:
                    value = True
                report_user = st.checkbox(
                    user['name'],
                    value=value,
                    key=f"report_users_{user_id}_input"
                )
                cb_users[user['name']] = report_user

            st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CVAT")

            url_cvat = st.text_input(
                "–•–æ—Å—Ç CVAT",
                value=st.session_state.app_config['cvat']['url'],
                key="url_cvat_input"
            )

            st.markdown("##### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")

            username = st.text_input(
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['cvat']['user']['username'],
                key="username_input"
            )

            email = st.text_input(
                "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['cvat']['user']['email'],
                key="email_input"
            )

            password = st.text_input(
                "–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=st.session_state.app_config['cvat']['user']['password'],
                type='password',
                key="password_input"
            )

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            submitted = st.form_submit_button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary")

            if submitted:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ session_state
                st.session_state.app_config['cvat']['url'] = url_cvat

                st.session_state.app_config['cvat']['user']['username'] = username
                st.session_state.app_config['cvat']['user']['email'] = email
                st.session_state.app_config['cvat']['user']['password'] = password

                st.session_state.app_config['email']['sender']['username'] = sender_username
                st.session_state.app_config['email']['sender']['email'] = sender_email
                st.session_state.app_config['email']['sender']['password'] = sender_password

                st.session_state.app_config['email']['recipient']['emails'] = recipient_emails

                st.session_state.app_config['report']['folder_path'] = report_folder_path

                report_users = []
                for name, cb in cb_users.items():
                    if cb:
                        user_id = find_key_by_value(users, name, 'name')
                        if user_id is None:
                            continue
                        report_users.append(user_id)

                st.session_state.app_config['report']['users'] = report_users

                apply_changes()

if __name__ == '__main__':
    app()
