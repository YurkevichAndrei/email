import hashlib
import streamlit as st
import json
import os
from extra_streamlit_components import CookieManager
import requests


class ConfigurationApp:
    def __init__(self):
        self.cookie_manager = CookieManager()
        self.config = self.load_config()
        self.server_path = f"{self.config['report']['server']['host']}:{self.config['report']['server']['port']}"

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    @staticmethod
    def check_auth(login: str, password):
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        stored_hash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"  # hash –¥–ª—è 'admin'

        return login == "admin" and password_hash == stored_hash

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    @staticmethod
    def load_config():
        try:
            if os.path.exists('config'):
                with open('config', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "cvat": {
                "url": "http://neuron.npomis.ru:8080",
                "user": {
                    "username": "spopov",
                    "email": "spopov@npomis.ru",
                    "password": "C6hd4z4n!"
                }
            },
            "email": {
                "sender": {
                    "username": "ayurkevich",
                    "email": "ayurkevich@npomis.ru",
                    "password": "ePu9ahga"
                },
                "recipient": {
                    "email": "ad6803884@yandex.ru"
                }
            }
        }
        return default_config

    # –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    def logout(self):
        st.session_state.authenticated = False
        st.session_state.persistent_auth = False
        st.session_state.config_updated = False

        # –£–¥–∞–ª—è–µ–º cookie
        try:
            self.cookie_manager.delete('admin_auth')
        except:
            pass

        st.rerun()

    # –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
    def login(self, login: str, password, remember_me=False):
        if self.check_auth(login, password):
            st.session_state.authenticated = True
            st.session_state.persistent_auth = remember_me
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookies –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
            if remember_me:
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –Ω–∞ 30 –¥–Ω–µ–π
                    import datetime
                    expires_at = datetime.datetime.now() + datetime.timedelta(days=30)
                    self.cookie_manager.set('admin_auth', 'authenticated_admin_session', expires_at=expires_at)
                except:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ cookies")

            url = f"{self.server_path}/db/update"
            response = requests.get(url)
            if response:
                pass
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    @staticmethod
    def save_config(config):
        with open('config', 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=4)

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def apply_changes(self):
        self.save_config(st.session_state.app_config)
        st.rerun()
        # st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        # time.sleep(5)
        # st.rerun()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ cookies
    def check_cookie_auth(self):
        try:
            auth_cookie = self.cookie_manager.get('admin_auth')
            if auth_cookie:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ)
                return auth_cookie == "authenticated_admin_session"
        except:
            pass
        return False

    @staticmethod
    def find_key_by_value(data, value, field):
        for key, item in data.items():
            if item.get(field) == value:
                return key
        return None

    @staticmethod
    def custom_spinner(message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä"""
        st.markdown(f"""
        <div class="loading-container">
            <div class="custom-spinner"></div>
            <p>{message}</p>
        </div>
        """, unsafe_allow_html=True)

    def generate_report(self):
        st.session_state.generate_report = False
        url = f"{self.server_path}/report/new"
        requests.get(url)

    @staticmethod
    def click_generate_report():
        st.session_state.generate_report = True

    @staticmethod
    def on_change_project():
        st.session_state.change_project = True

    @staticmethod
    def change_project_f(new_name, names_list, proj_ids):
        st.session_state.project = proj_ids[names_list.index(new_name)]

    def app(self):
        st.set_page_config(
            page_title="–û—Ç—á–µ—Ç—ã CVAT",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            page_icon="‚öôÔ∏è",              # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
            layout="wide"                # –†–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookies (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        if not hasattr(st, 'cookie_manager_initialized'):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å cookie manager
                if hasattr(self.cookie_manager, 'get_all'):
                    st.cookie_manager_initialized = True
            except:
                pass

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π cookies
        if 'authenticated' not in st.session_state:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ cookies
            if self.check_cookie_auth():
                st.session_state.authenticated = True
                st.session_state.persistent_auth = True
            else:
                st.session_state.authenticated = False
                st.session_state.persistent_auth = False

        if 'app_config' not in st.session_state:
            st.session_state.app_config = self.load_config()

        if 'generate_report' not in st.session_state:
            st.session_state.generate_report = False

        if 'change_project' not in st.session_state:
            st.session_state.change_project = False

        if 'project' not in st.session_state:
            st.session_state.project = st.session_state.app_config['report']['project']

        if 'labels' not in st.session_state:
            st.session_state.labels = {}

        # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
        if not st.session_state.authenticated:
            st.markdown("""
            <style>
            .stMainBlockContainer {
                max-width: 50%;
                padding-left: 5rem;
                padding-right: 5rem;
            }
            </style>
            """, unsafe_allow_html=True)
            st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

            with st.form("auth_form"):
                login_input = st.text_input("–õ–æ–≥–∏–Ω", placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", value="admin")
                password_input = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", value="admin")
                remember_me = st.checkbox("–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", value=True)

                submitted = st.form_submit_button("–í–æ–π—Ç–∏", type="primary")

                if submitted:
                    self.login(login_input, password_input, remember_me)

            # st.info("üí° –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: **–ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: admin**")

            st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–ª—å—à–µ

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
        with st.sidebar:
            st.write(f"**–í—ã –≤–æ—à–ª–∏ –∫–∞–∫:** admin")

            if st.button("üö™ –í—ã–π—Ç–∏"):
                self.logout()

            st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", on_click=self.click_generate_report, type="primary")
            if st.session_state.generate_report:
                spinner_container = st.empty()
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                with spinner_container.container():
                    self.custom_spinner("–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
                self.generate_report()
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                spinner_container.empty()
                st.success("–ì–æ—Ç–æ–≤–æ!")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ session_state
        if 'config' not in st.session_state:
            st.session_state.app_config = self.load_config()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–û –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ Streamlit
        st.set_page_config(layout="wide")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        st.markdown("""
            <style>
            .stMainBlockContainer {
                max-width: 90%;
                padding-left: 5rem;
                padding-right: 5rem;
            }
            </style>
            """, unsafe_allow_html=True)

        config_container = st.container()
        with (config_container):
            # –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
            st.markdown("""
            <style>
            .custom-spinner {
                display: inline-block;
                width: 50px;
                height: 50px;
                border: 5px solid #f3f3f3;
                border-top: 5px solid #1E88E5;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 20px auto;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .loading-container {
                text-align: center;
                padding: 20px;
            }
            
            .fixed-header {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                background-color: #0E1117;
                color: white;
                padding: 15px 0;
                text-align: center;
                z-index: 9999;
                font-size: 1.5rem;
                font-weight: bold;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            }
            /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
            .main-content {
                margin-top: 80px;
            }
            """, unsafe_allow_html=True)

            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            st.title("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

            #
            # st.markdown("### –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            # st.json(st.session_state.app_config, expanded=False)

            # CSS –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
            st.markdown("""
                <style>
                    /* –ü–æ–¥–ø—É–Ω–∫—Ç—ã */
                    button[data-baseweb="tab"] > div[data-testid="stMarkdownContainer"] {
                        font-size: 1.0rem;
                    }
                    /* –ü—É–Ω–∫—Ç—ã */
                    button[data-baseweb="tab"] > div[data-testid="stMarkdownContainer"] > p {
                        font-size: 1.2rem;
                    }
                </style>
                """, unsafe_allow_html=True)
            st.markdown("### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            with st.form("app_config_form"):

                tab1, tab2= st.tabs(["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CVAT"])

                with tab1:
                    tab11, tab12, tab13, tab14, tab15, tab16 = st.tabs(["–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏", "–•—Ä–∞–Ω–µ–Ω–∏–µ",
                                                                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ü—Ä–µ—Å–µ—Ç—ã", "–ü—Ä–æ–µ–∫—Ç"])
                    with tab11:
                        sender_username = st.text_input(
                            "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            value=st.session_state.app_config['email']['sender']['username'],
                            key="sender_username_input"
                        )

                        sender_email = st.text_input(
                            "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            value=st.session_state.app_config['email']['sender']['email'],
                            key="sender_email_input"
                        )

                        sender_password = st.text_input(
                            "–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            value=st.session_state.app_config['email']['sender']['password'],
                            type='password',
                            key="sender_password_input"
                        )

                    with tab12:
                        recipient_emails = st.multiselect(
                            '–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                            options=st.session_state.app_config['email']['recipient']['emails'],
                            default=st.session_state.app_config['email']['recipient']['emails'],
                            key="recipients_email_input",
                            accept_new_options=True
                        )

                    with tab13:
                        report_folder_path = st.text_input(
                            "–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤",
                            value=st.session_state.app_config['report']['folder_path'],
                            key="report_folder_path_input"
                        )

                    with tab14:
                        cb_users = {}
                        url = f"{self.server_path}/db/users"
                        response = requests.get(url)
                        users = response.json()
                        col1, col2 = st.columns(2)
                        users_list = list(users.items())
                        for index, (user_id, user) in enumerate(users_list):
                            user_id = int(user_id)
                            value = False
                            if user_id in st.session_state.app_config['report']['users']:
                                value = True
                            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ—Ç–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
                            current_col = col1 if index % 2 == 0 else col2
                            # –†–∞–∑–º–µ—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
                            with current_col:
                                report_user = st.checkbox(
                                    user['name'],
                                    value=value,
                                    key=f"report_users_{user_id}_input"
                                )
                                cb_users[user['name']] = report_user

                    with tab15:
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ session_state
                        if 'presets' not in st.session_state:
                            st.session_state.presets = {}
                        url = f"{self.server_path}/db/presets"
                        response = requests.get(url)
                        st.session_state.presets = response.json()
                        if st.session_state.presets.get('detail') == 'Not Found':
                            st.session_state.presets = {}
                        else:
                            st.session_state.presets = {int(i): preset for i, preset in st.session_state.presets.items()}
                        # st.session_state.presets = {
                        #     0: {
                        #         "name": "–ø—Ä–µ—Å–µ—Ç 1",
                        #         "labels": []
                        #     },
                        #     1: {
                        #         "name": "–ø—Ä–µ—Å–µ—Ç 2",
                        #         "labels": []
                        #     },
                        #     2: {
                        #         "name": "–ø—Ä–µ—Å–µ—Ç 3",
                        #         "labels": []
                        #     },
                        #     3: {
                        #         "name": "–ø—Ä–µ—Å–µ—Ç 4",
                        #         "labels": []
                        #     },
                        # }
                        if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", key="new_button"):
                            max_id_preset = 0
                            if len(list(st.session_state.presets.keys())) != 0:
                                max_id_preset = max(list(st.session_state.presets.keys()))
                            new_preset = {'name': "–ù–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç", "labels": []}
                            st.session_state.presets[max_id_preset+1] = new_preset
                            st.rerun()

                        if len(list(st.session_state.presets.keys())) != 0:
                            preset_ids = list(st.session_state.presets.keys())

                            url = f"{self.server_path}/db/labels"
                            response = requests.get(url, params={'project_id': st.session_state.project})
                            st.session_state.labels = response.json()

                            for i in preset_ids:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–µ—Å–µ—Ç (–º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
                                if i not in st.session_state.presets.keys():
                                    continue
                                with st.expander(st.session_state.presets[i]['name']):
                                    st.session_state.presets[i]['name'] = st.text_input("–ò–º—è", value=st.session_state.presets[i]['name'], key=f"name_{i}")
                                    st.session_state.presets[i]['labels'] = st.multiselect(
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏",
                                        st.session_state.labels.keys(),
                                        default=st.session_state.presets[i]['labels'],
                                        key=f"select_{i}"
                                        )
                                    if st.form_submit_button("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", key=f"del_button_{i}"):
                                        st.session_state.presets.pop(i)
                                        st.rerun()

                    with tab16:
                        url = f"{self.server_path}/db/projects"
                        response = requests.get(url)
                        projects = response.json()

                        projects_nums = []
                        i = 0
                        options = []
                        index = 0
                        for id_proj, proj_name in projects.items():
                            id_proj = int(id_proj)
                            options.append(proj_name)
                            projects_nums.append(id_proj)
                            if id_proj == st.session_state.project:
                                index = i
                            i+=1

                        option = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                            options,
                            index=index,
                            on_change=self.on_change_project()
                        )
                        if st.session_state.change_project:
                            self.change_project_f(option, options, projects_nums)
                            st.session_state.change_project = False

                with tab2:
                    url_cvat = st.text_input(
                        "–•–æ—Å—Ç CVAT",
                        value=st.session_state.app_config['cvat']['url'],
                        key="url_cvat_input"
                    )

                    st.markdown("###### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")

                    username = st.text_input(
                        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        value=st.session_state.app_config['cvat']['user']['username'],
                        key="username_input"
                    )

                    email = st.text_input(
                        "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        value=st.session_state.app_config['cvat']['user']['email'],
                        key="email_input"
                    )

                    password = st.text_input(
                        "–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        value=st.session_state.app_config['cvat']['user']['password'],
                        type='password',
                        key="password_input"
                    )

                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                submitted = st.form_submit_button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary")

                if submitted:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ session_state
                    st.session_state.app_config['cvat']['url'] = url_cvat

                    st.session_state.app_config['cvat']['user']['username'] = username
                    st.session_state.app_config['cvat']['user']['email'] = email
                    st.session_state.app_config['cvat']['user']['password'] = password

                    st.session_state.app_config['email']['sender']['username'] = sender_username
                    st.session_state.app_config['email']['sender']['email'] = sender_email
                    st.session_state.app_config['email']['sender']['password'] = sender_password

                    st.session_state.app_config['email']['recipient']['emails'] = recipient_emails

                    st.session_state.app_config['report']['folder_path'] = report_folder_path

                    report_users = []
                    for name, cb in cb_users.items():
                        if cb:
                            user_id = self.find_key_by_value(users, name, 'name')
                            if user_id is None:
                                continue
                            report_users.append(int(user_id))

                    st.session_state.app_config['report']['users'] = report_users

                    st.session_state.app_config['report']['presets'] = list(st.session_state.presets.keys())

                    presets = {}
                    if len(list(st.session_state.presets.keys())) != 0:
                        preset_ids = list(st.session_state.presets.keys())

                        for i in preset_ids:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–µ—Å–µ—Ç (–º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
                            if i not in st.session_state.presets.keys():
                                continue
                            presets[i] = {'name': st.session_state.presets[i]['name'], 'labels': []}
                            for label in st.session_state.presets[i]['labels']:
                                presets[i]['labels'].append(st.session_state.labels[label])

                    url = f"{self.server_path}/db/presets"
                    requests.post(url, json=presets)

                    self.apply_changes()

if __name__ == '__main__':
    app = ConfigurationApp()
    app.app()
